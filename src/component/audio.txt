/** @jsxImportSource @emotion/react */
import React, { useState, useRef, useEffect } from 'react';
import { FaPlayCircle, FaPauseCircle, FaVolumeUp, FaVolumeMute } from 'react-icons/fa';
import { IoIosSkipBackward, IoIosSkipForward } from 'react-icons/io';
import { css } from '@emotion/react';
import { keyframes } from '@emotion/react';
import { AiFillCloseSquare } from '../icons'
import { useSelector } from 'react-redux';
import {  RootState } from '../types/musicTypes';

// AudioPlayer component
const AudioPlayer: React.FC = () => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [isMuted, setIsMuted] = useState(false);
  const [isSeeking, setIsSeeking] = useState(false);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // Audio data (can be dynamic)


const music = useSelector((state:RootState)=> state.musicPlayer.musics)
const closeBtn = useSelector((state:RootState)=> state.musicPlayer.musicPlayer)
const play = useSelector((state:RootState)=> state.musicPlayer.isPlaying)
 
console.log(music.audio)
const audioSrc = 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3';
const trackTitle = `${music.title}`;
const trackArtist = `${music.artist}`;
const trackImage = 'https://via.placeholder.com/150';

  // Play and pause music
  const playMusic = () => {
    audioRef.current?.play();
    setIsPlaying(true);
  };

  const pauseMusic = () => {
    audioRef.current?.pause();
    setIsPlaying(false);
  };

  const togglePlayPause = () => {
    isPlaying ? pauseMusic() : playMusic();
  };

  // Handle seeking through the audio
  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const seekTime = parseFloat(e.target.value);
    if (audioRef.current) {
      audioRef.current.currentTime = seekTime;
    }
    setCurrentTime(seekTime);
  };

  // Handle volume changes
  const handleVolume = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    if (audioRef.current) {
      audioRef.current.volume = newVolume;
    }
  };

  // Toggle mute
  const toggleMute = () => {
    setIsMuted(!isMuted);
    if (audioRef.current) {
      audioRef.current.volume = isMuted ? volume : 0; // Restore volume if unmuted
    }
  };

  // Sync current time while audio plays
  useEffect(() => {
    const audio = audioRef.current;
    const updateCurrentTime = () => {
      if (audio && !isSeeking) {
        setCurrentTime(audio.currentTime);
      }
    };

    if (audio) {
      audio.addEventListener('timeupdate', updateCurrentTime);
      return () => {
        audio.removeEventListener('timeupdate', updateCurrentTime);
      };
    }
  }, [isSeeking]);

  // Update duration once the audio is loaded
  const handleLoadedMetadata = () => {
    if (audioRef.current) {
      setDuration(audioRef.current.duration);
    }
  };

  // Track seek slider interaction
  const handleSeekStart = () => {
    setIsSeeking(true);
  };

  const handleSeekEnd = () => {
    setIsSeeking(false);
  };

  const handleClose = () => {

  alert('close')
  

  }

  return (
    <div css={playerContainer}>
      <AiFillCloseSquare onClick={handleClose}  />
      <audio
        ref={audioRef}
        src={audioSrc}
        onLoadedMetadata={handleLoadedMetadata}
        preload="metadata"
      />
    
      <div css={player}>
        {/* Track Info */}
        <div css={trackInfo}>
          <img src={trackImage} alt="Track Cover" css={trackCover} />
          <div css={trackDetails}>
            <p css={trackTitleStyle}>{trackTitle}</p>
            <p css={trackArtistStyle}>{trackArtist}</p>
          </div>
        </div>
     <div css={midControls}>
        {/* Player Controls */}
        <div css={controls}>
          {/* Play / Pause Button */}
          <button css={controlButton} onClick={togglePlayPause}>
            {isPlaying ? <FaPauseCircle size={36} /> : <FaPlayCircle size={36} />}
          </button>

        </div>
          {/* Seek Slider */}
          <div css={seekContainer}>
            <input
              type="range"
              min="0"
              max={duration || 100}
              value={currentTime}
              onChange={handleSeek}
              onMouseDown={handleSeekStart}
              onMouseUp={handleSeekEnd}
              step="0.1"
              css={seekBar}
            />
           
          </div>
          <div css={seekTime}>
              <span>{formatTime(currentTime)}</span>  <span>{formatTime(duration)}</span>
            </div>
        </div>
        {/* Volume Controls */}
        <div css={volumeControls}>
          <button css={controlButton} onClick={toggleMute}>
            {isMuted ? <FaVolumeMute size={24} /> : <FaVolumeUp size={24} />}
          </button>
          <input
            type="range"
            min="0"
            max="1"
            value={isMuted ? 0 : volume}
            step="0.01"
            onChange={handleVolume}
            css={volumeSlider}
          />
        </div>
      </div>
    
    </div>
  );
};

// Helper function to format time in minutes:seconds
const formatTime = (time: number) => {
  const minutes = Math.floor(time / 60);
  const seconds = Math.floor(time % 60);
  return `${minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
};

// Styles using Emotion's css and styled-components

const playerContainer = css`
  width: 100%;
  max-width: 1200px;
  margin: 10px auto;
  padding: 5px;
  background-color: #22222224;
  border-radius: 10px;
  color: #0a0236;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  position:fixed;
  left:0;
  right:0;
  transition: 0.3s ease-in-out;
  bottom:3px;

`;

const player = css`
  display: flex;
  flex-direction: row;
  justify-content: space-around;
`;

const trackInfo = css`
  display: flex;
  align-items: center;
  margin-bottom: 15px;
`;

const trackCover = css`
  width: 50px;
  height: 50px;
  margin-right: 15px;
  border-radius: 5px;
`;

const trackDetails = css`
  font-size: 14px;
`;

const trackTitleStyle = css`
  font-weight: bold;
  font-size: 16px;
`;

const trackArtistStyle = css`
  color: #0a0236;
  font-size: 14px;
`;

const midControls = css`
  display: flex;
  flex-direction:column;
  width:600px;
  padding:10px;
  justify-content:space-around;
  background-color:orange;
 
  
  
`;
const controls = css`
  display: flex;
  justify-content: center;
  align-items: center;
  width:100%;
  
`;

const controlButton = css`
  background: transparent;
  border: none;
  color: #0a0236;
  cursor: pointer;
`;

const seekContainer = css`
  display: flex;
  align-items: center;
  flex-grow: 1;
  width:100%;
`;

const seekBar = css`
  width: 100%;
  margin: 0 10px;
`;

const seekTime = css`
  font-size: 12px;
  display:flex;
  color: #0a0236;
  font-weight:bold;
  width:100%;
  justify-content:space-between;
 
`;

const volumeControls = css`
  display: flex;
  align-items: center;
  justify-content: flex-end;
`;

const volumeSlider = css`
  width: 100px;
  margin-left: 10px;
`;

export default AudioPlayer;









import React, { useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { closePlayer } from '../features/musicPlayerSlice';
import { AiFillCloseSquare, FaCirclePause, VscUnmute, FaPlayCircle, IoVolumeMuteOutline } from '../icons';
import { imageUrl, audioUrl } from '../api/musicApi';
import { useMusicPlayer } from '../hooks/useMusicPlayer';
import { RootState, musicPlayer } from "../types/musicTypes"





const AudioPlayer: React.FC = () => {
  // Destructure the values from the custom hook
  const {
    currentTime,
    setCurrentTime,
    duration,
    setDuration,
    isMuted,
    setIsMuted,
    volume,
    setVolume,
    isPlaying,
    setIsPlaying,             
  } = useMusicPlayer();

  // Dispatch function and Redux state
  const dispatch = useDispatch();
  const music = useSelector((state: musicPlayer) => state.musicPlayer);
  const musicPlayer = useSelector((state: RootState) => state.musicPlayer.musicPlayer);

  const musics = useSelector((state: RootState) => state.musics.musics); 
  const warning = useSelector((state: RootState) => state.musics.removeMusic);

  console.log(music)

  // Refs for audio element
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const myMusic = `${audioUrl}/${music.audio}`;
  const myImage = `${imageUrl}/${music.musics.image}`;  


  // Play and pause music
  const playMusic = () => {
    audioRef.current?.play();
    setIsPlaying(true);
  };

  const pauseMusic = () => {
    audioRef.current?.pause();
    setIsPlaying(false);
  };

  const handlePlayPause = () => {
    isPlaying ? pauseMusic() : playMusic();
  };

  // Toggle mute state
  const toggleMute = () => {
    if (isMuted) {
      setIsMuted(false);
      if (audioRef.current) audioRef.current.volume = volume; // Restore previous volume
    } else {
      setIsMuted(true);
      if (audioRef.current) audioRef.current.volume = 0; // Mute
    }
  };

  // Handle seeking through the audio
  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const seekTime = parseFloat(e.target.value);
    if (audioRef.current) {
      audioRef.current.currentTime = seekTime;
    }
    setCurrentTime(seekTime);
  };

  // Handle volume changes
  const handleVolume = (e: React.ChangeEvent<HTMLInputElement>) => {
    const adjustVolume = parseFloat(e.target.value);
    const clampedVolume = Math.min(Math.max(adjustVolume, 0), 1);
    if (audioRef.current) {
      audioRef.current.volume = clampedVolume;
    }
    setVolume(clampedVolume);
  };

  useEffect(() => {
    const audioElement = audioRef.current; // Capture the current ref value

    const handleTimeUpdate = () => {
      if (audioElement) setCurrentTime(audioElement.currentTime);
    };

    const handleLoaded = () => {
      if (audioElement) {
        setDuration(audioElement.duration);
        audioElement.volume = volume; // Set initial volume
      }
    };

    if (audioElement) {
      audioElement.addEventListener('timeupdate', handleTimeUpdate);
      audioElement.addEventListener('loadeddata', handleLoaded);
    }

    // Cleanup function using the captured variable
    return () => {
      if (audioElement) {
        audioElement.removeEventListener('timeupdate', handleTimeUpdate);
        audioElement.removeEventListener('loadeddata', handleLoaded);
      }
    };
  }, [volume, setCurrentTime, setDuration]);

  // Format the time duration
  const formatDuration = (durationSeconds: number) => {
    const minutes = Math.floor(durationSeconds / 60);
    const seconds = Math.floor(durationSeconds % 60);
    const formattedSeconds = seconds.toString().padStart(2, '0'); // second digit
    return `${minutes} : ${formattedSeconds}`;
  };

  // Close the music player
  const closeBtn = () => {
    dispatch(closePlayer());
  };

  return (
    <div className={`playerContainer ${musicPlayer ? 'hiddenPlayer' : ''}`}>
      <audio ref={audioRef} src={myMusic} autoPlay />
      <div className="musicDiscri">
        <div className="musicImage">
          <img src={myImage} alt="cover" className="audioCover" />
        </div>
        <div>
         {/*  <p>
            Title: <b>{music.title}</b>
          </p>
          <p>
            Artist: <b>{music.artist}</b>
          </p> */}
        </div>
      </div>
      <div className="musicPlay">
        <div>
          <span onClick={handlePlayPause}>
            {isPlaying ? (
              <FaCirclePause className="playPause" />
            ) : (
              <FaPlayCircle className="playPause" />
            )}
          </span>
        </div>
        <div className="playControl">
          <input
            className="playRange"
            type="range"
            min="0"
            max={duration}
            value={currentTime}
            step="0.01"
            onChange={handleSeek}
          />
        </div>
        <div className="duration">
          <p>{formatDuration(currentTime)}</p>
          <p>{formatDuration(duration)}</p>
        </div>
      </div>
      <div className="musicControl">
        <AiFillCloseSquare className="close" onClick={closeBtn} />
        <span onClick={toggleMute}>
          {isMuted ? (
            <IoVolumeMuteOutline className="muteBtn" />
          ) : (
            <VscUnmute className="muteBtn" />
          )}
        </span>
        <input
          type="range"
          onChange={handleVolume}
          min="0"
          max="1"
          value={volume}
          step="0.01"
        />
      </div>
    </div>
  );
};

export default AudioPlayer;

















